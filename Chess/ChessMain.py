'''
It will be responsible for handling user input and displaying the current
GameState object
'''

import pygame as p
from Chess import ChessEngine, Chess_AI

BOARD_WIDTH = BOARD_HEIGHT = 512
MOVE_LOG_PANEL_WIDTH = 250
MOVE_LOG_PANEL_HEIGHT = BOARD_HEIGHT
DIMENSION = 8
SQ_SIZE = BOARD_HEIGHT // DIMENSION
MAX_FPS = 15  # will be used for animation
IMAGES = {}

def load_images():
    pieces = ['wP', 'wR', 'wN', 'wB', 'wQ', 'wK', 'bP', 'bR', 'bN', 'bB', 'bQ', 'bK']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load('images/'+piece+'.png'),
                                          (SQ_SIZE,SQ_SIZE))

# main driver, will handle user input and updating the graphics
def main():
    p.init()  # or we can initialize at the beginning
    screen = p.display.set_mode((BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT))
    clock = p.time.Clock()
    screen.fill(p.Color('white'))
    move_log_font = p.font.SysFont('Ariel', 15 , False, False)

    gs = ChessEngine.GameState()
    valid_moves = gs.get_valid_moves()
    move_made = False  # flag variable for when a move is made
    animate = False
    load_images()  # do this once before the while loop

    running = True
    sq_select = ()  # keep track of the last click of the user
    player_click = []  # keep track of player clicks
    game_over = False
    player_one = True  # if a human is playing white, then this will be true. if AI is playing then False
    player_two = False  # same as above but for black
    while running:
        human_turn = (gs.white_to_move and player_one) or (not gs.white_to_move and player_two)
        for e in p.event.get():
            if e.type == p.QUIT:
                running = False
            # mouse handler
            elif e.type == p.MOUSEBUTTONDOWN:
                if not game_over and human_turn:
                    location = p.mouse.get_pos()  # (x,y) loaction of mouse
                    col = location[0] // SQ_SIZE
                    row = location[1] // SQ_SIZE
                    if sq_select == (row, col) or col >= 8:  # the user clicked the same pos twice or user clicked mouse log
                        # unselect
                        sq_select = ()
                        player_click = []
                    else:
                        sq_select = (row, col)
                        player_click.append(sq_select)  # append for both clicks

                    if len(player_click) == 2:
                        move = ChessEngine.Move(player_click[0], player_click[1], gs.board)
                        print(move.get_chess_notation())
                        for i in range(len(valid_moves)):
                            if move == valid_moves[i]:
                                gs.make_move(valid_moves[i])  # this is the move generated by the engine
                                move_made = True
                                animate = True
                                sq_select = ()
                                player_click = []
                        if not move_made:
                            player_click = [sq_select]


            # key handlers
            elif e.type == p.KEYDOWN:
                if e.key == p.K_z:  # undo when 'z' is pressed
                    gs.undo_move()
                    valid_moves = gs.get_valid_moves()
                    move_made = True
                    animate = False
                    game_over = False

                if e.key == p.K_r :  # reset the board when r is pressed
                    gs = ChessEngine.GameState()
                    valid_moves = gs.get_valid_moves()
                    sq_select = ()
                    player_click = []
                    move_made = False
                    animate = False
                    game_over = False

        # AI move finder
        if not game_over and not human_turn:
            AI_move = Chess_AI.find_best_move(gs, valid_moves)
            if AI_move is None:
                AI_move = Chess_AI.find_random_move(valid_moves)
            gs.make_move(AI_move)
            move_made = True
            animate = True

        if move_made:
            if animate:
                animated_move(gs.move_log[-1], screen, gs.board, clock)
            valid_moves = gs.get_valid_moves()
            move_made = False
            animate = False

        draw_game_state(screen, gs, valid_moves, sq_select, move_log_font)

        if gs.checkmate:
            game_over = True
            if gs.white_to_move:
                draw_end_game_text(screen, 'Black wins by checkmate')
            else:
                draw_end_game_text(screen, 'White wins by checkmate')
        elif gs.stalemate:
            game_over = True
            draw_end_game_text(screen, 'Stalemate!')

        clock.tick(MAX_FPS)
        p.display.flip()

# Responsible for all the graphics within a current game state
def draw_game_state(screen, gs, valid_moves, sq_selected, move_log_font):
    draw_board(screen)  # draw squares on board
    # add in piece highlighting or move suggestions
    highlight_squares(screen, gs, valid_moves, sq_selected)
    draw_pieces(screen, gs.board)  # draw pieces on top of those squares
    draw_move_log(screen, gs, move_log_font)

# In chess the top-left square is always light
def draw_board(screen):
    global colors
    colors = [p.Color('white'), p.Color('grey')]
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            color = colors[(r+c)%2]
            p.draw.rect(screen, color, p.Rect(c*SQ_SIZE, r*SQ_SIZE, SQ_SIZE, SQ_SIZE))
            # (column, row, dims)

# highlight square selected and moves for player selected
def highlight_squares(screen, gs, valid_moves, sq_selected):
    if sq_selected != ():
        r, c = sq_selected
        if gs.board[r][c][0] == ('w' if gs.white_to_move else 'b'):
            # highlight selected square
            s = p.Surface((SQ_SIZE, SQ_SIZE))
            s.set_alpha(100)  # transparency value  0->transparent, 255->opaque
            s.fill(p.Color('chartreuse1'))
            screen.blit(s, (c*SQ_SIZE, r*SQ_SIZE))
            # highlight moves from that square
            s.fill(p.Color('darkslategray1'))
            for move in valid_moves:
                if move.start_row == r and move.start_col == c: # if move is starting from our selected square
                    screen.blit(s, (move.end_col*SQ_SIZE, move.end_row*SQ_SIZE))

# draw the pieces on the board using the current GameState.board
def draw_pieces(screen, board):
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            piece = board[r][c]
            if piece != '--':  # not an empty square
                screen.blit(IMAGES[piece], p.Rect(c*SQ_SIZE, r*SQ_SIZE, SQ_SIZE, SQ_SIZE))

# draws the move log
def draw_move_log(screen, gs, font):
    move_log_rect = p.Rect(BOARD_WIDTH, 0, MOVE_LOG_PANEL_WIDTH, MOVE_LOG_PANEL_HEIGHT)
    p.draw.rect(screen, p.Color('black'), move_log_rect)
    move_log = gs.move_log
    move_texts = []
    for i in range(0, len(move_log), 2):
        move_string = str(i//2 + 1) + ', '+ move_log[i].get_chess_notation()+' '
        if i+1 < len(move_log):  # make sure black made a move
            move_string += move_log[i+1].get_chess_notation()
        move_texts.append(move_string)

    moves_per_row = 3
    padding = 5
    text_y = padding
    line_spacing = 2
    for i in range(0, len(move_texts), moves_per_row):
        text = ''
        for j in range(moves_per_row):
            if i+j < len(move_texts):
                text += move_texts[i+j]
        text_object = font.render(text, True, p.Color('white'))
        text_location = move_log_rect.move(padding, text_y)
        screen.blit(text_object, text_location)
        text_y += text_object.get_height() + line_spacing

# animating a move
def animated_move(move, screen, board, clock):
    global colors
    coords = []  # list of coords that animation ll move through
    dR = move.end_row - move.start_row
    dC = move.end_col - move.start_col
    frames_per_square = 5  # animation speed-frame to move one square
    frame_count = (abs(dR) + abs(dC)) * frames_per_square

    for frame in range(frame_count + 1):
        r, c = (move.start_row + dR*frame/frame_count, move.start_col + dC*frame/frame_count)
        draw_board(screen)
        draw_pieces(screen, board)

        # erase the piece moved from its ending square
        color = colors[(move.end_row + move.end_col) % 2]
        end_square = p.Rect(move.end_col*SQ_SIZE, move.end_row*SQ_SIZE, SQ_SIZE, SQ_SIZE)
        p.draw.rect(screen, color, end_square)

        # draw captured piece onto rectangle
        if move.piece_captured != '--':
            if move.is_enpassant_move:
                enpassant_row = move.end_row+1 if move.piece_captured[0] == 'b' else move.end_row-1
                end_square = p.Rect(move.end_col*SQ_SIZE, enpassant_row*SQ_SIZE, SQ_SIZE, SQ_SIZE)
            screen.blit(IMAGES[move.piece_captured], end_square)
        # draw moving piece
        screen.blit(IMAGES[move.piece_moved], p.Rect(c*SQ_SIZE, r*SQ_SIZE, SQ_SIZE, SQ_SIZE))
        p.display.flip()
        clock.tick(200) # frame rate per animation

def draw_end_game_text(screen, text):
    font = p.font.SysFont('Helvitca', 32, True, False)  # bold, italicized
    text_object = font.render(text, 0, p.Color('Gray '))
    text_location = p.Rect(0, 0, BOARD_WIDTH, BOARD_HEIGHT).move(BOARD_WIDTH / 2 - text_object.get_width() / 2, BOARD_HEIGHT / 2 - text_object.get_height() / 2)  # a way to centre our text
    screen.blit(text_object, text_location)
    text_object = font.render(text, 0, p.Color('Black'))
    screen.blit(text_object, text_location.move(2,2))

if __name__ == '__main__':
    main()
